*oneterm.txt* One terminal plugin to rule them all (eventually)
*oneterm*

OneTerm

===============================================================================
CONTENTS                                                     *oneterm-contents*

  1. Introduction.............|oneterm-introduction|
  2. Requirements.............|oneterm-requirements|
  3. Usage....................|oneterm-usage|
  4. Commands.................|oneterm-commands|
  5. Configuration............|oneterm-configuration|
  6. Framework................|oneterm-framework|

===============================================================================
1. Introduction                                          *oneterm-introduction*
OneTerm is a blazing-fast plugin for neovim-nightly using neovim's terminal to 
navigate files and more.

===============================================================================
2. Requirements                                          *oneterm-requirements*
 - fzf for most commands
 - rg for files and rg
 - ag for ag
 - ranger for ranger
 - gitui for git

===============================================================================
3. Usage                                                        *oneterm-usage*
Install the package using your favorite method, then use the `:OneTerm`
command. Completion is enabled.

===============================================================================
4. Commands                                                  *oneterm-commands*
 - `files` : list files using ripgrep
 - `git_files` : list files using `git ls-files`
 - `files_or_git_files` : list files using either method above 
   based on the presence of a `.git` dir in nvim's current `pwd`.
 - `buffers` : list vim buffers
 - `ag` : find lines in files using the silver searcher
 - `rg` : find lines in files using ripgrep
 - `commits` : browse git log (nothing special happens on exit)
 - `references` : browse (and jump to) references of the keyword under the cursor
   using neovim's built-in lsp
 - `symbols` : browse (and jump to) lsp symbols in the current file
 - `ws_symbols` : same as `symbols` but for the entire workspace
 - `git` : open gitui and push changes on exit
   (gitui's push feature isn't working for me, I'd love feedback on this)
 - `ranger` : open ranger and edit selected file
 - `make` : list makefile targets and run selected
 - `yank` : list yank history and paste it at the cursor on `<CR>` or `<C-p>`, yank to `+` register on `<C-y>`

===============================================================================
5. Configuration                                        *oneterm-configuration*
OneTerm's window is configurable using the following |variables|.
You can set them using either |g:| from vimscript or |vim.g| from |lua|.
 - `oneterm_width` and `oneterm_height` set the width and height of the window,
   in absolute columns or rows
 - `oneterm_width_ratio` and `oneterm_height_ratio` set the width and height ratios. 
   These should be set to numbers between 0 (for no window)
   and 1 (window fills the editor)
 - `oneterm_margin_left` and `oneterm_margin_top` set the margins,
   these are ratios and should be set to numbers between 0 and 1 like the ratios
 - `oneterm_yank` needs to be set to |true| to be able to use the yank command !
===============================================================================
6. Framework                                                *oneterm-framework*
Each of the commands calls the same |lua| function,
accessible using `lua require('oneterm').main(arg_object)`.
`arg_object` should be an object, with the following keys :
 - `cmd` (required) : this can be either a string, representing a shell command `"git ls-files"` for example or a lua function, like `function() return vim.api.nvim_exec("ls", true) end`
 - `preview` (optional, defaults to `"bat --color=always -n {}"`) : this is a string containing the `--preview` argument for fzf (see `man fzf` for more details)
 - `matcher` (optional, defaults to `fzf` with args) : this can be set to replace fzf with any other matcher, or `xargs echo` to just use the result of `cmd`
 - `delimiter` (optional, defaults to awk-style) : this can be used to set fzf's field delimiter (see `man fzf`) for details
 - `output_format` (optional, defaults to `"{}"`)this is a string, using fzf-style argument-replacement
